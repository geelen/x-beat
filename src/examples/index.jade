extends _layout.jade
block content
  h1= "<x-beat>"
  style.
    body {
      padding: 1rem;
      max-width: 800px;
      margin: 0 auto;
    }
    svg {
      padding: 1rem 0;
      font: 12px 'Helvetica Neue';
      width: 100%;
      max-height: 200px;
    }
    path {
      fill: none;
      stroke: #000;
      stroke-width: 1px;
    }
    line {
      fill: none;
      stroke: #000;
    }
    .axis text {
      display: none;
    }
    .midi {
      color: blue;
      stroke: blue;
    }
    .visual {
      color: red;
      stroke: red;
    }
    footer {
      border-top: solid 1px #ccc;
      margin-top: 2rem;
      padding-top: 1rem;
      text-align: center;
    }
    .me {
      width: 3rem;
      height: 3rem;
      border-radius: 50%;
    }
    pre {
      background-color: #eee;
      margin: 1rem;
      padding: 1rem;
      width: intrinsic;
      margin: 1rem auto;
    }
    p > span {
      margin-right: 2em;
    }

  x-beat(midi channel="0" note="65")
  h3.regular
    = "A Web Component for generating a continuous stream of beats from (currently) MIDI and (soon) Web Audio for the synchronising of GIFs to music. "
    a(target='_blank' href='https://github.com/geelen/x-beat') Source on GitHub
    | .
  p
    span.midi MIDI BEAT SIGNAL
    span
      span.visual PREDICTED BEATS
      |  (to drive an x-gif)
  svg.d3-svg(viewBox="0 0 800 200")
  script(src="assets/d3.min.js")
  script(src="assets/d3_beat_graph.js")
  p
    = "Can't see any blue lines? You gotta get yourself a browser that has the "
    a(target='_blank' href='http://www.w3.org/TR/webmidi') Web MIDI API
    |  enabled (Chrome stable + enable this flag: chrome://flags/#enable-web-midi).
    | Then get something to generate MIDI beats from audio (
    a(target='_blank' href='http://wavesum.net/products.html#wavetick') Wavetick
    = " works really well, and instructions for setting up a MIDI bus to connect it to Chrome are "
    a(target='_blank' href='http://www.wavesum.net/support/configure-sotware-and-network-midi-on-osx/') here
    | ), then play some music!
  p
    = "Once that's all working, check it out "
    a(target='_blank' href='x-gif.html') powering &lt;x-gif&gt;!
    |  It takes this much code to wire them together :D
    pre
      code.
        var xBeat = document.querySelector('x-beat'),
          xGif = document.querySelector('x-gif');

        xBeat.addEventListener('x-beat-clock', function(e) {
          xGif.clock.apply(xGif, e.detail);
        });
  p
    | If you know more about this stuff than me and want to help contribute, here's how I see this going:
    ul
      li
        = "Figure out a really robust beat-tracking algorithm, so even if the input is noisy or disappears, x-beat is still producing smooth output. "
        a(target='_blank' href='https://github.com/geelen/x-beat/issues/1') Discuss on GitHub
      li
        = "Replace the MIDI input with in-browser beat detection written in JS using the Web Audio API. "
        a(target='_blank' href='https://github.com/geelen/x-beat/issues/2') Discuss on GitHub
  footer
    h3 Made with &lt;3 and ¯\_(ツ)_/¯ by
    a(target='_blank' href='https://twitter.com/glenmaddern')
      img.me(src='http://i.imgur.com/x577Tga.jpg' alt='')
      br
      | @glenmaddern

